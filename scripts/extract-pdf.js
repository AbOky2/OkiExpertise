#!/usr/bin/env node

// üìÑ Script d'extraction PDF - Int√©gration dans le chatbot
// Usage: node scripts/extract-pdf.js

const fs = require('fs');
const path = require('path');
const pdf = require('pdf-parse');

async function extractPDFContent() {
  try {
    console.log('üìÑ Extraction du contenu PDF...');
    
    // Chemin vers le PDF
    const pdfPath = path.join(__dirname, '../public/Pr√©sentation Oki Expertise.pdf');
    
    // V√©rifier si le fichier existe
    if (!fs.existsSync(pdfPath)) {
      console.error('‚ùå Fichier PDF non trouv√©:', pdfPath);
      return null;
    }
    
    // Lire le fichier PDF
    const dataBuffer = fs.readFileSync(pdfPath);
    
    // Extraire le texte
    const data = await pdf(dataBuffer);
    
    console.log('‚úÖ PDF extrait avec succ√®s');
    console.log('üìä Statistiques:');
    console.log('- Pages:', data.numpages);
    console.log('- Caract√®res:', data.text.length);
    console.log('');
    
    return data.text;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'extraction:', error.message);
    return null;
  }
}

function parseContentForChatbot(content) {
  console.log('ü§ñ Analyse du contenu pour le chatbot...');
  
  // Nettoyer le texte
  const cleanContent = content
    .replace(/\s+/g, ' ')
    .replace(/\n\s*\n/g, '\n')
    .trim();
  
  // Sections √† identifier
  const sections = {
    presentation: {
      keywords: ['pr√©sentation', 'qui sommes-nous', '√† propos', 'oki expertise'],
      content: []
    },
    services: {
      keywords: ['services', 'prestations', 'offres', 'expertise comptable'],
      content: []
    },
    equipe: {
      keywords: ['√©quipe', 'team', 'collaborateurs', 'expert-comptable'],
      content: []
    },
    experience: {
      keywords: ['exp√©rience', 'r√©f√©rences', 'clients', 'secteurs'],
      content: []
    },
    valeurs: {
      keywords: ['valeurs', 'engagement', 'qualit√©', 'mission'],
      content: []
    }
  };
  
  // Diviser en paragraphes
  const paragraphs = cleanContent.split('\n').filter(p => p.trim().length > 20);
  
  // Classifier les paragraphes par section
  paragraphs.forEach(paragraph => {
    const lowerParagraph = paragraph.toLowerCase();
    
    for (const [sectionName, section] of Object.entries(sections)) {
      if (section.keywords.some(keyword => lowerParagraph.includes(keyword))) {
        section.content.push(paragraph.trim());
        break;
      }
    }
  });
  
  return {
    fullContent: cleanContent,
    sections: sections,
    paragraphs: paragraphs
  };
}

function generateKnowledgeBaseUpdate(parsedContent) {
  console.log('üìù G√©n√©ration de la mise √† jour de la base de connaissances...');
  
  const updates = [];
  
  // Section pr√©sentation de l'entreprise
  if (parsedContent.sections.presentation.content.length > 0) {
    updates.push({
      key: 'presentation_entreprise',
      category: 'Pr√©sentation',
      keywords: [
        'pr√©sentation', 'qui √™tes-vous', 'entreprise', 'cabinet', '√† propos',
        'histoire', 'oki expertise', 'pr√©senter', 'parlez-moi'
      ],
      response: `Pr√©sentation d'Oki Expertise :

${parsedContent.sections.presentation.content.join('\n\n')}

Souhaitez-vous en savoir plus sur nos services ou notre √©quipe ?`
    });
  }
  
  // Section √©quipe
  if (parsedContent.sections.equipe.content.length > 0) {
    updates.push({
      key: 'equipe',
      category: '√âquipe',
      keywords: [
        '√©quipe', 'team', 'collaborateurs', 'expert-comptable', 'qui travaille',
        'personnel', 'staff', 'dirigeant', 'fondateur'
      ],
      response: `Notre √©quipe chez Oki Expertise :

${parsedContent.sections.equipe.content.join('\n\n')}

Voulez-vous prendre rendez-vous avec notre √©quipe ?`
    });
  }
  
  // Section exp√©rience
  if (parsedContent.sections.experience.content.length > 0) {
    updates.push({
      key: 'experience',
      category: 'Exp√©rience',
      keywords: [
        'exp√©rience', 'r√©f√©rences', 'clients', 'secteurs', 'domaines',
        'expertise', 'sp√©cialisation', 'ann√©es', 'historique'
      ],
      response: `Notre exp√©rience et r√©f√©rences :

${parsedContent.sections.experience.content.join('\n\n')}

Souhaitez-vous discuter de votre secteur d'activit√© sp√©cifique ?`
    });
  }
  
  // Section valeurs
  if (parsedContent.sections.valeurs.content.length > 0) {
    updates.push({
      key: 'valeurs',
      category: 'Valeurs',
      keywords: [
        'valeurs', 'engagement', 'qualit√©', 'mission', 'philosophie',
        'approche', 'm√©thode', 'diff√©rence', 'pourquoi vous choisir'
      ],
      response: `Nos valeurs et engagements :

${parsedContent.sections.valeurs.content.join('\n\n')}

Ces valeurs vous correspondent-elles ? Parlons de votre projet !`
    });
  }
  
  return updates;
}

function generateUpdatedConfig(updates) {
  console.log('üîß G√©n√©ration du fichier de configuration mis √† jour...');
  
  // Lire le fichier actuel
  const configPath = path.join(__dirname, '../lib/chatbot-config.ts');
  let currentConfig = fs.readFileSync(configPath, 'utf8');
  
  // Pr√©parer les nouvelles entr√©es
  let newEntries = '';
  
  updates.forEach(update => {
    newEntries += `
  ${update.key}: {
    category: "${update.category}",
    keywords: [
      ${update.keywords.map(k => `'${k}'`).join(', ')}
    ],
    response: \`${update.response}\`
  },
`;
  });
  
  // Ins√©rer avant la fermeture de KNOWLEDGE_BASE
  const insertPoint = currentConfig.lastIndexOf('}');
  const beforeInsert = currentConfig.substring(0, insertPoint - 1);
  const afterInsert = currentConfig.substring(insertPoint);
  
  const updatedConfig = beforeInsert + ',' + newEntries + '\n' + afterInsert;
  
  return updatedConfig;
}

async function main() {
  console.log('üöÄ Int√©gration du PDF dans le chatbot');
  console.log('====================================');
  
  // √âtape 1: Extraire le contenu du PDF
  const pdfContent = await extractPDFContent();
  if (!pdfContent) {
    console.error('‚ùå Impossible d\'extraire le PDF');
    return;
  }
  
  // √âtape 2: Parser le contenu
  const parsedContent = parseContentForChatbot(pdfContent);
  
  // √âtape 3: G√©n√©rer les mises √† jour
  const updates = generateKnowledgeBaseUpdate(parsedContent);
  
  console.log(`‚úÖ ${updates.length} nouvelles sections identifi√©es:`);
  updates.forEach(update => {
    console.log(`- ${update.category}: ${update.keywords.slice(0, 3).join(', ')}...`);
  });
  
  // √âtape 4: Sauvegarder le contenu extrait pour r√©vision
  const extractPath = path.join(__dirname, '../extracted-pdf-content.txt');
  fs.writeFileSync(extractPath, `CONTENU EXTRAIT DU PDF
========================

CONTENU COMPLET:
${parsedContent.fullContent}

SECTIONS IDENTIFI√âES:
${JSON.stringify(parsedContent.sections, null, 2)}

MISES √Ä JOUR PROPOS√âES:
${JSON.stringify(updates, null, 2)}
`);
  
  console.log('');
  console.log('üìÅ Fichiers g√©n√©r√©s:');
  console.log('- extracted-pdf-content.txt (pour r√©vision)');
  
  // √âtape 5: Proposer la mise √† jour
  console.log('');
  console.log('üéØ Prochaines √©tapes:');
  console.log('1. R√©visez le contenu dans extracted-pdf-content.txt');
  console.log('2. Confirmez l\'int√©gration dans le chatbot');
  console.log('3. Test du chatbot avec les nouvelles informations');
  
  console.log('');
  console.log('‚úÖ Extraction termin√©e avec succ√®s !');
}

// Ex√©cution
main().catch(console.error); 