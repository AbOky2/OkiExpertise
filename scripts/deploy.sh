#!/bin/bash

# ðŸš€ Script de DÃ©ploiement Production - Chatbot GPT Oki Expertise
# Usage: ./scripts/deploy.sh

set -e

echo "ðŸš€ DÃ©ploiement Production - Chatbot GPT"
echo "======================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage colorÃ©
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rification des prÃ©requis
print_status "VÃ©rification des prÃ©requis..."

# VÃ©rifier si Git est installÃ©
if ! command -v git &> /dev/null; then
    print_error "Git n'est pas installÃ©"
    exit 1
fi

# VÃ©rifier si npm est installÃ©
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas installÃ©"
    exit 1
fi

# VÃ©rifier si on est dans un repo Git
if [ ! -d ".git" ]; then
    print_error "Ce n'est pas un repository Git"
    exit 1
fi

print_success "PrÃ©requis validÃ©s"

# Ã‰tape 1: VÃ©rifier le statut Git
print_status "VÃ©rification du statut Git..."
if [ -n "$(git status --porcelain)" ]; then
    print_warning "Il y a des changements non commitÃ©es"
    echo "Voulez-vous les committer automatiquement ? (y/n)"
    read -r response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        git add .
        echo "Message de commit (ou appuyez sur EntrÃ©e pour un message par dÃ©faut):"
        read -r commit_message
        if [ -z "$commit_message" ]; then
            commit_message="fix: production deployment ready"
        fi
        git commit -m "$commit_message"
        print_success "Changements committÃ©s"
    else
        print_error "Veuillez committer vos changements avant le dÃ©ploiement"
        exit 1
    fi
fi

# Ã‰tape 2: Test du build
print_status "Test du build de production..."
if npm run build; then
    print_success "Build rÃ©ussi"
else
    print_error "Ã‰chec du build"
    exit 1
fi

# Ã‰tape 3: VÃ©rification des variables d'environnement
print_status "VÃ©rification des variables d'environnement..."
echo "Avez-vous configurÃ© OPENAI_API_KEY sur votre plateforme de dÃ©ploiement ? (y/n)"
read -r env_response
if [[ ! "$env_response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    print_warning "N'oubliez pas de configurer OPENAI_API_KEY !"
    echo ""
    echo "ðŸ“‹ Instructions rapides:"
    echo "â€¢ Vercel: Dashboard > Settings > Environment Variables"
    echo "â€¢ Netlify: Site settings > Environment variables"
    echo "â€¢ Variable: OPENAI_API_KEY=sk-votre-cle-ici"
    echo ""
    echo "Continuez quand mÃªme ? (y/n)"
    read -r continue_response
    if [[ ! "$continue_response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        exit 0
    fi
fi

# Ã‰tape 4: Push vers Git
print_status "Push vers le repository..."
current_branch=$(git branch --show-current)
git push origin "$current_branch"
print_success "Code pushÃ© vers $current_branch"

# Ã‰tape 5: DÃ©ploiement selon la plateforme
print_status "Quelle plateforme utilisez-vous ?"
echo "1) Vercel"
echo "2) Netlify" 
echo "3) Autre (push Git uniquement)"
echo "4) Skip dÃ©ploiement"
read -r platform_choice

case $platform_choice in
    1)
        print_status "DÃ©ploiement Vercel..."
        if command -v vercel &> /dev/null; then
            vercel --prod
            print_success "DÃ©ployÃ© sur Vercel"
        else
            print_warning "Vercel CLI non installÃ©"
            echo "Installez avec: npm i -g vercel"
            echo "Ou dÃ©ployez via Git push (auto-deploy)"
        fi
        ;;
    2)
        print_status "DÃ©ploiement Netlify..."
        if command -v netlify &> /dev/null; then
            netlify deploy --prod
            print_success "DÃ©ployÃ© sur Netlify"
        else
            print_warning "Netlify CLI non installÃ©"
            echo "Installez avec: npm i -g netlify-cli"
            echo "Ou dÃ©ployez via Git push (auto-deploy)"
        fi
        ;;
    3)
        print_success "Code pushÃ© - dÃ©ploiement automatique en cours..."
        ;;
    4)
        print_success "DÃ©ploiement skippÃ©"
        ;;
    *)
        print_warning "Choix invalide - dÃ©ploiement skippÃ©"
        ;;
esac

# Ã‰tape 6: Tests post-dÃ©ploiement
echo ""
print_status "Tests recommandÃ©s aprÃ¨s dÃ©ploiement:"
echo "âœ… 1. Visitez votre site"
echo "âœ… 2. VÃ©rifiez que le chatbot apparaÃ®t"
echo "âœ… 3. Testez une question: 'Quels sont vos services ?'"
echo "âœ… 4. VÃ©rifiez l'indicateur 'GPT ActivÃ©'"
echo "âœ… 5. Testez sur mobile"

# Ã‰tape 7: Informations utiles
echo ""
print_success "ðŸŽ‰ DÃ©ploiement terminÃ© !"
echo ""
echo "ðŸ“Š Informations utiles:"
echo "â€¢ Documentation: RESOLUTION_PROBLEMES_PROD.md"
echo "â€¢ Guide rapide: DEPLOIEMENT_RAPIDE.md"
echo "â€¢ Logs Vercel: vercel logs"
echo "â€¢ Test API: curl -X POST https://votre-site.com/api/chat -H 'Content-Type: application/json' -d '{\"question\":\"test\"}'"
echo ""
echo "ðŸ”— Liens utiles:"
echo "â€¢ OpenAI Dashboard: https://platform.openai.com/"
echo "â€¢ Vercel Dashboard: https://vercel.com/dashboard"
echo "â€¢ Netlify Dashboard: https://app.netlify.com/"

echo ""
print_success "Votre chatbot GPT est maintenant en production ! ðŸš€" 