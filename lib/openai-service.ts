import OpenAI from 'openai'
import { KNOWLEDGE_BASE } from './chatbot-config'

// Configuration OpenAI
const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY || '',
  dangerouslyAllowBrowser: true // N√©cessaire pour utilisation c√¥t√© client
})

// Fonction pour extraire le contexte pertinent de la base de connaissances
const extractRelevantContext = (question: string): string => {
  const questionLower = question.toLowerCase()
  const relevantCategories: string[] = []
  
  // Recherche des cat√©gories pertinentes
  for (const [, data] of Object.entries(KNOWLEDGE_BASE)) {
    if (data.keywords.some(keyword => questionLower.includes(keyword))) {
      relevantCategories.push(`**${data.category}**:\n${data.response}`)
    }
  }
  
  // Si aucune cat√©gorie sp√©cifique trouv√©e, inclure les informations g√©n√©rales
  if (relevantCategories.length === 0) {
    relevantCategories.push(
      KNOWLEDGE_BASE.services.response,
      KNOWLEDGE_BASE.contact.response
    )
  }
  
  return relevantCategories.slice(0, 3).join('\n\n---\n\n') // Limite √† 3 cat√©gories pour √©viter un contexte trop long
}

// Syst√®me prompt pour GPT
const SYSTEM_PROMPT = `Tu es l'assistant virtuel d'Oki Expertise, un cabinet d'expertise comptable fran√ßais moderne et professionnel.

IDENTIT√â & PERSONNALIT√â :
- Tu es un expert-comptable virtuel comp√©tent et bienveillant
- Tu parles fran√ßais de mani√®re professionnelle mais accessible
- Tu es pr√©cis, informatif et orient√© solutions
- Tu utilises des emojis de mani√®re mod√©r√©e et professionnelle

INFORMATIONS ENTREPRISE :
- Oki Expertise : Cabinet d'expertise comptable, audit et conseil
- Inscrit √† l'Ordre des Experts-Comptables
- T√©l√©phone : +33 7 51 51 66 42
- Services : Expertise comptable, Audit, Conseil juridique et fiscal, Cr√©ation d'entreprise
- Sp√©cialis√© dans l'accompagnement des TPE/PME

R√àGLES DE R√âPONSE :
1. R√©ponds UNIQUEMENT aux questions li√©es √† la comptabilit√©, l'audit, le juridique, la fiscalit√©, la cr√©ation d'entreprise
2. Utilise les informations du contexte fourni en priorit√©
3. Si tu ne connais pas une information sp√©cifique, oriente vers le contact direct
4. Sois concis mais complet (maximum 200 mots)
5. Termine toujours par une question ou une proposition d'aide
6. Utilise un ton professionnel mais chaleureux
7. Structure tes r√©ponses avec des puces ou num√©ros si n√©cessaire

INTERDICTIONS :
- Ne r√©ponds PAS aux questions hors sujet (m√©t√©o, actualit√©s, autres domaines)
- Ne donne PAS de conseils juridiques ou fiscaux pr√©cis sans consultation
- N'invente PAS d'informations sur Oki Expertise

Si une question est hors sujet, r√©ponds poliment que tu es sp√©cialis√© dans l'expertise comptable et oriente vers les services d'Oki Expertise.`

// Fonction principale pour g√©n√©rer une r√©ponse avec GPT
export const generateGPTResponse = async (question: string): Promise<string> => {
  try {
    // V√©rification de la cl√© API
    if (!process.env.NEXT_PUBLIC_OPENAI_API_KEY) {
      throw new Error('Cl√© API OpenAI manquante')
    }

    // Extraction du contexte pertinent
    const context = extractRelevantContext(question)
    
    // Appel √† l'API OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `${SYSTEM_PROMPT}\n\nCONTEXTE PERTINENT :\n${context}`
        },
        {
          role: "user",
          content: question
        }
      ],
      max_tokens: 300,
      temperature: 0.7,
      presence_penalty: 0.1,
      frequency_penalty: 0.1
    })

    const response = completion.choices[0]?.message?.content?.trim()
    
    if (!response) {
      throw new Error('R√©ponse vide de GPT')
    }

    return response

  } catch (error) {
    console.error('Erreur GPT:', error)
    
    // Fallback vers la base de connaissances locale
    return generateFallbackResponse(question)
  }
}

// Fonction de fallback en cas d'erreur GPT
const generateFallbackResponse = (question: string): string => {
  const questionLower = question.toLowerCase()
  
  // Recherche dans la base de connaissances locale
  for (const [, data] of Object.entries(KNOWLEDGE_BASE)) {
    if (data.keywords.some(keyword => questionLower.includes(keyword))) {
      return `${data.response}\n\nüí° *R√©ponse g√©n√©r√©e par notre base de connaissances. Pour des conseils personnalis√©s, contactez-nous au +33 7 51 51 66 42.*`
    }
  }
  
  // R√©ponse par d√©faut
  return `Je comprends votre question sur "${question}".

ü§ñ Pour vous donner la r√©ponse la plus pr√©cise et personnalis√©e, je vous recommande de :

üìû **Contacter directement notre √©quipe**
   +33 7 51 51 66 42

üí¨ **Utiliser WhatsApp**
   R√©ponse rapide garantie

üìß **Remplir notre formulaire de contact**
   Sur notre site web

Notre √©quipe d'experts-comptables vous r√©pondra dans les plus brefs d√©lais avec des conseils adapt√©s √† votre situation.

Y a-t-il autre chose sur laquelle je peux vous renseigner ?`
}

// Fonction pour valider si une question est dans le domaine d'expertise
export const isQuestionRelevant = (question: string): boolean => {
  const relevantKeywords = [
    'comptable', 'comptabilit√©', 'audit', 'fiscal', 'juridique', 'entreprise',
    'soci√©t√©', 'cr√©ation', 'bilan', 'd√©claration', 'tva', 'imp√¥t', 'charge',
    'salaire', 'statut', 'sarl', 'sas', 'auto-entrepreneur', 'micro-entreprise',
    'expert-comptable', 'commissaire', 'conseil', 'gestion', 'finance'
  ]
  
  const questionLower = question.toLowerCase()
  return relevantKeywords.some(keyword => questionLower.includes(keyword))
} 