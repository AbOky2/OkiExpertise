import { NextApiRequest, NextApiResponse } from 'next'
import OpenAI from 'openai'
import { KNOWLEDGE_BASE } from '@/lib/chatbot-config'

// Configuration OpenAI c√¥t√© serveur (s√©curis√©)
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // Variable d'environnement serveur
})

// Fonction pour extraire le contexte pertinent de la base de connaissances
const extractRelevantContext = (question: string): string => {
  const questionLower = question.toLowerCase()
  const relevantCategories: string[] = []
  
  // Recherche des cat√©gories pertinentes
  for (const [, data] of Object.entries(KNOWLEDGE_BASE)) {
    if (data.keywords.some(keyword => questionLower.includes(keyword))) {
      relevantCategories.push(`**${data.category}**:\n${data.response}`)
    }
  }
  
  // Si aucune cat√©gorie sp√©cifique trouv√©e, inclure les informations g√©n√©rales
  if (relevantCategories.length === 0) {
    relevantCategories.push(
      KNOWLEDGE_BASE.services.response,
      KNOWLEDGE_BASE.contact.response
    )
  }
  
  return relevantCategories.slice(0, 3).join('\n\n---\n\n')
}

// Syst√®me prompt pour GPT
const SYSTEM_PROMPT = `Tu es l'assistant virtuel d'Oki Expertise, un cabinet d'expertise comptable fran√ßais moderne et professionnel.

IDENTIT√â & PERSONNALIT√â :
- Tu es un expert-comptable virtuel comp√©tent et bienveillant
- Tu parles fran√ßais de mani√®re professionnelle mais accessible
- Tu es pr√©cis, informatif et orient√© solutions
- Tu utilises des emojis de mani√®re mod√©r√©e et professionnelle

INFORMATIONS ENTREPRISE :
- Oki Expertise : Cabinet d'expertise comptable, audit et conseil
- Inscrit √† l'Ordre des Experts-Comptables
- T√©l√©phone : +33 7 51 51 66 42
- Services : Expertise comptable, Audit, Conseil juridique et fiscal, Cr√©ation d'entreprise
- Sp√©cialis√© dans l'accompagnement des TPE/PME

R√àGLES DE R√âPONSE :
1. R√©ponds UNIQUEMENT aux questions li√©es √† la comptabilit√©, l'audit, le juridique, la fiscalit√©, la cr√©ation d'entreprise
2. Utilise les informations du contexte fourni en priorit√©
3. Si tu ne connais pas une information sp√©cifique, oriente vers le contact direct
4. Sois concis mais complet (maximum 200 mots)
5. Termine toujours par une question ou une proposition d'aide
6. Utilise un ton professionnel mais chaleureux
7. Structure tes r√©ponses avec des puces ou num√©ros si n√©cessaire

INTERDICTIONS :
- Ne r√©ponds PAS aux questions hors sujet (m√©t√©o, actualit√©s, autres domaines)
- Ne donne PAS de conseils juridiques ou fiscaux pr√©cis sans consultation
- N'invente PAS d'informations sur Oki Expertise

Si une question est hors sujet, r√©ponds poliment que tu es sp√©cialis√© dans l'expertise comptable et oriente vers les services d'Oki Expertise.`

// Fonction de fallback en cas d'erreur GPT
const generateFallbackResponse = (question: string): string => {
  const questionLower = question.toLowerCase()
  
  // Recherche dans la base de connaissances locale
  for (const [, data] of Object.entries(KNOWLEDGE_BASE)) {
    if (data.keywords.some(keyword => questionLower.includes(keyword))) {
      return `${data.response}\n\nüí° *Pour des conseils personnalis√©s, contactez-nous au +33 7 51 51 66 42.*`
    }
  }
  
  // R√©ponse par d√©faut
  return `Je comprends votre question sur "${question}".

ü§ñ Pour vous donner la r√©ponse la plus pr√©cise et personnalis√©e, je vous recommande de :

üìû **Contacter directement notre √©quipe**
   +33 7 51 51 66 42

üí¨ **Utiliser WhatsApp**
   R√©ponse rapide garantie

üìß **Remplir notre formulaire de contact**
   Sur notre site web

Notre √©quipe d'experts-comptables vous r√©pondra dans les plus brefs d√©lais avec des conseils adapt√©s √† votre situation.

Y a-t-il autre chose sur laquelle je peux vous renseigner ?`
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // V√©rifier la m√©thode HTTP
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©thode non autoris√©e' })
  }

  try {
    const { question } = req.body

    // Validation de base
    if (!question || typeof question !== 'string' || question.trim().length === 0) {
      return res.status(400).json({ error: 'Question manquante ou invalide' })
    }

    // Limitation de longueur
    if (question.length > 500) {
      return res.status(400).json({ error: 'Question trop longue (max 500 caract√®res)' })
    }

    // V√©rification de la cl√© API
    if (!process.env.OPENAI_API_KEY) {
      console.warn('Cl√© API OpenAI manquante, utilisation du fallback')
      return res.status(200).json({ 
        response: generateFallbackResponse(question),
        source: 'fallback'
      })
    }

    // Extraction du contexte pertinent
    const context = extractRelevantContext(question)
    
    // Appel √† l'API OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `${SYSTEM_PROMPT}\n\nCONTEXTE PERTINENT :\n${context}`
        },
        {
          role: "user",
          content: question
        }
      ],
      max_tokens: 300,
      temperature: 0.7,
      presence_penalty: 0.1,
      frequency_penalty: 0.1
    })

    const response = completion.choices[0]?.message?.content?.trim()
    
    if (!response) {
      throw new Error('R√©ponse vide de GPT')
    }

    return res.status(200).json({ 
      response,
      source: 'gpt',
      tokens: completion.usage?.total_tokens || 0
    })

  } catch (error) {
    console.error('Erreur API Chat:', error)
    
    // Fallback en cas d'erreur
    const fallbackResponse = generateFallbackResponse(req.body.question || '')
    
    return res.status(200).json({ 
      response: fallbackResponse,
      source: 'fallback',
      error: 'Erreur GPT, utilisation du fallback'
    })
  }
} 